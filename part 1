<?php
/**
 * Plugin Name: URL Forwarder
 * Plugin URI: https://github.com/sachinrgala/URL_forwarder
 * Description: Redirects specified URLs to other URLs.
 * Version: 1.0.0
 * Author: Sachin Gala
 * Author URI: https://sachingala.com
 * License: GPL2
 */

class URL_Forwarder {
    private $redirects = array();

    public function __construct() {
        // Load plugin translations
        add_action('plugins_loaded', array($this, 'load_translations'));

        // Register activation hook
        register_activation_hook(__FILE__, array($this, 'activate'));

        // Register deactivation hook
        register_deactivation_hook(__FILE__, array($this, 'deactivate'));

        // Register admin menu
        add_action('admin_menu', array($this, 'add_admin_menu'));

        // Register settings
        add_action('admin_init', array($this, 'register_settings'));

        // Load redirects from the database
        $this->load_redirects();

        // Register AJAX actions
        add_action('wp_ajax_add_redirect', array($this, 'ajax_add_redirect'));
        add_action('wp_ajax_delete_redirect', array($this, 'ajax_delete_redirect'));
    }

    public function load_translations() {
        load_plugin_textdomain('url-forwarder', false, dirname(plugin_basename(__FILE__)) . '/languages/');
    }

    public function activate() {
        // Create database table for redirects
        global $wpdb;

        $table_name = $wpdb->prefix . 'url_forwarder_redirects';

        $charset_collate = $wpdb->get_charset_collate();

        $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            source_url varchar(255) NOT NULL,
            destination_url varchar(255) NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);
    }

    public function deactivate() {
        // Remove database table for redirects
        global $wpdb;

        $table_name = $wpdb->prefix . 'url_forwarder_redirects';

        $wpdb->query("DROP TABLE IF EXISTS $table_name");
    }

    public function add_admin_menu() {
        // Add plugin page
        add_plugins_page(__('URL Forwarder', 'url-forwarder'), __('URL Forwarder', 'url-forwarder'), 'manage_options', 'url-forwarder', array($this, 'render_settings_page'));
    }

    public function render_settings_page() {
        ?>
        <div class="wrap">
            <h1><?php echo esc_html(get_admin_page_title()); ?></h1>
            <form method="post" action="options.php">
                <?php settings_fields('url_forwarder_settings'); ?>
                <?php do_settings_sections('url_forwarder_settings'); ?>
                <?php submit_button(__('Save Changes', 'url-forwarder')); ?>
            </form>
        </div>
        <?php
    }

    public function register_settings() {
        // Register settings
        register_setting('url_forwarder_settings', 'url_forwarder_redirects');

        // Add section for redirects
        add_settings_section('url_forwarder_redirects', __('Redirects', 'url-forwarder'), '', 'url_forwarder_settings');

        // Add fields for redirects
        for ($i = 1; $i <= 100; $i++) {
            add_settings_field(
                "url_forwarder_redirect_source_$i",
                __('Source URL', 'url-forwarder'),
                array($this, 'render_source_url_field'),
                'url_forwarder_settings',
                'url_forwarder_redirects',
                array('id' => $i)
            );
            add_settings_field(
                "url_forwarder_redirect_destination_$i",
                __('Destination URL', 'url-forwarder'),
                array($this, 'render_destination_url_field'),
                'url_forwarder_settings',
                'url_forwarder_redirects',
                array('id' => $i)
            );
        }
    }

    public function render_source_url_field($args) {
        $redirects = get_option('url_forwarder_redirects');
        $id = $args['id'];
        $value = isset($redirects[$id]['source_url']) ? esc_attr($redirects[$id]['source_url']) : '';
        echo "<input type='text' name='url_forwarder_redirects[$id][source_url]' value='$value' />";
    }

    public function render_destination_url_field($args) {
        $redirects = get_option('url_forwarder_redirects');
        $id = $args['id'];
        $value = isset($redirects[$id]['destination_url']) ? esc_attr($redirects[$id]['destination_url']) : '';
        echo "<input type='text' name='url_forwarder_redirects[$id][destination_url]' value='$value' />";
    }

    public function ajax_add_redirect() {
        $source_url = isset($_POST['source_url']) ? sanitize_text_field($_POST['source_url']) : '';
        $destination_url = isset($_POST['destination_url']) ? sanitize_text_field($_POST['destination_url']) : '';

        if (!empty($source_url) && !empty($destination_url)) {
            $redirects = get_option('url_forwarder_redirects');
            $redirects[] = array(
                'source_url' => $source_url,
                'destination_url' => $destination_url,
            );
            update_option('url_forwarder_redirects', $redirects);
            wp_send_json_success(__('Redirect added successfully.', 'url-forwarder'));
        } else {
            wp_send_json_error(__('Invalid source URL or destination URL.', 'url-forwarder'));
        }
    }

    public function ajax_delete_redirect() {
        $id = isset($_POST['id']) ? absint($_POST['id']) : 0;

        if ($id > 0) {
            $redirects = get_option('url_forwarder_redirects');
            unset($redirects[$id]);
            update_option('url_forwarder_redirects', $redirects);
            wp_send_json_success(__('Redirect deleted successfully.', 'url-forwarder'));
        } else {
            wp_send_json_error(__('Invalid redirect ID.', 'url-forwarder'));
        }
    }

    public function load_redirects() {
        $this->redirects = get_option('url_forwarder_redirects', array());
    }

    public function redirect() {
        $url = $this->get_forwarding_url();

        if (!empty($url)) {
            wp_redirect($url, 301);
            exit;
        }
    }

    public function get_forwarding_url() {
        $source_url = $_SERVER['REQUEST_URI'];
        $redirect = $this->get_redirect_for_source_url($source_url);

        if (!empty($redirect)) {
    $destination_url = $redirect['destination_url'];
    $destination_url = $this->add_tracking_parameters($destination_url, $source_url);
    return $destination_url;
}

return '';
}

public function add_tracking_parameters($url, $source_url) {
    // Extract UTM parameters, FBCLID, GCLID, Value Track parameters and custom parameters from the source URL
    $parsed_url = parse_url($source_url);
    $query_params = isset($parsed_url['query']) ? $parsed_url['query'] : '';
    parse_str($query_params, $params);
    $utm_params = array();
    $fbclid = '';
    $gclid = '';
    $custom_params = array();

    foreach ($params as $key => $value) {
        if (preg_match('/^utm_/', $key)) {
            $utm_params[$key] = $value;
        } elseif ($key == 'fbclid') {
            $fbclid = $value;
        } elseif ($key == 'gclid') {
            $gclid = $value;
        } else {
            $custom_params[$key] = $value;
        }
    }

    // Append the tracking parameters to the destination URL
    $parsed_destination_url = parse_url($url);
    $query_params = isset($parsed_destination_url['query']) ? $parsed_destination_url['query'] : '';
    parse_str($query_params, $params);
    $params = array_merge($params, $utm_params);
    if (!empty($fbclid)) {
        $params['fbclid'] = $fbclid;
    }
    if (!empty($gclid)) {
        $params['gclid'] = $gclid;
    }
    $params = array_merge($params, $custom_params);
    $query_string = http_build_query($params);
    $url = isset($parsed_destination_url['scheme']) ? $parsed_destination_url['scheme'] . '://' : '';
    $url .= isset($parsed_destination_url['host']) ? $parsed_destination_url['host'] : '';
    $url .= isset($parsed_destination_url['path']) ? $parsed_destination_url['path'] : '';
    $url .= !empty($query_string) ? '?' . $query_string : '';
    return $url;
}

public function render_redirects_section() {
    echo '<div id="url-forwarder-redirects">';
    echo '<h2>' . __('Redirects', 'url-forwarder') . '</h2>';
    echo '<p>' . __('Enter the old and new URLs that you want to redirect below:', 'url-forwarder') . '</p>';
    echo '<table class="form-table">';
    echo '<tr><th>' . __('Old URL', 'url-forwarder') . '</th><th>' . __('New URL', 'url-forwarder') . '</th><th></th></tr>';

    $i = 1;

    foreach ($this->redirects as $i => $redirect) {
    echo '<tr>';
    echo '<td><input type="text" name="url_forwarder_redirects[' . $i . '][source_url]" value="' . esc_attr($redirect['source_url']) . '" /></td>';
    echo '<td><input type="text" name="url_forwarder_redirects[' . $i . '][destination_url]" value="' . esc_attr($redirect['destination_url']) . '" /></td>';
    echo '<td><a href="#" class="url-forwarder-delete-redirect" data-id="' . $i . '">' . __('Delete', 'url-forwarder') . '</a></td>';
    echo '</tr>';
}
<table class="form-table">
    <thead>
        <tr>
            <th><?php _e('Source URL', 'url-forwarder'); ?></th>
            <th><?php _e('Destination URL', 'url-forwarder'); ?></th>
            <th><?php _e('Actions', 'url-forwarder'); ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($this->redirects as $i => $redirect) : ?>
            <tr>
                <td><input type="text" name="url_forwarder_redirects[<?php echo $i; ?>][source_url]" value="<?php echo esc_attr($redirect['source_url']); ?>" /></td>
                <td><input type="text" name="url_forwarder_redirects[<?php echo $i; ?>][destination_url]" value="<?php echo esc_attr($redirect['destination_url']); ?>" /></td>
                <td><a href="#" class="url-forwarder-delete-redirect" data-id="<?php echo $i; ?>"><?php _e('Delete', 'url-forwarder'); ?></a></td>
            </tr>
        <?php endforeach; ?>
    </tbody>
    <tfoot>
        <tr>
            <th><?php _e('Source URL', 'url-forwarder'); ?></th>
            <th><?php _e('Destination URL', 'url-forwarder'); ?></th>
            <th><?php _e('Actions', 'url-forwarder'); ?></th>
        </tr>
        <tr>
            <td colspan="3">
                <a href="#" class="button url-forwarder-add-redirect"><?php _e('Add Redirect', 'url-forwarder'); ?></a>
                <input type="submit" name="submit" class="button button-primary" value="<?php _e('Save Changes', 'url-forwarder'); ?>" />
            </td>
        </tr>
    </tfoot>
</table>
public function update_redirects() {
    if (!current_user_can('manage_options')) {
        wp_die(__('You do not have sufficient permissions to access this page.', 'url-forwarder'));
    }

    if (isset($_POST['url_forwarder_redirects'])) {
        $redirects = $_POST['url_forwarder_redirects'];
        $updated_redirects = array();

        foreach ($redirects as $redirect) {
            $source_url = trim($redirect['source_url']);
            $destination_url = trim($redirect['destination_url']);

            if (!empty($source_url) && !empty($destination_url)) {
                $updated_redirects[] = array(
                    'source_url' => $source_url,
                    'destination_url' => $destination_url
                );
            }
        }

        update_option('url_forwarder_redirects', $updated_redirects);
        $this->redirects = $updated_redirects;
    }

    // Redirect to the settings page with a success message
    $redirect_url = add_query_arg(
        'message',
        urlencode(__('Settings saved.', 'url-forwarder')),
        menu_page_url('url_forwarder_settings', false)
    );
    wp_redirect($redirect_url);
    exit;
}

private function add_tracking_parameters($url) {
    $params = array(
        'utm_source' => 'source',
        'utm_medium' => 'medium',
        'utm_campaign' => 'campaign',
        'utm_term' => 'term',
        'utm_content' => 'content',
        'fbclid' => 'fbclid',
        'gclid' => 'gclid',
        'utm_id' => 'utm_id'
    );

    $custom_params = array(
        'custom_param1' => 'value1',
        'custom_param2' => 'value2',
        'custom_param3' => 'value3'
    );

    // Parse the current URL
    $parsed_url = wp_parse_url($url);
    $query_params = array();

    // Parse the query string and add or update the tracking parameters
    if (!empty($parsed_url['query'])) {
        wp_parse_str($parsed_url['query'], $query_params);
    }

    foreach ($params as $param_key => $param_value) {
        if (!empty($_GET[$param_key])) {
            $query_params[$param_value] = $_GET[$param_key];
        }
    }

    foreach ($custom_params as $param_key => $param_value) {
        if (!empty($_GET[$param_key])) {
            $query_params[$param_key] = $_GET[$param_key];
        }
    }

    // Add the query string to the URL
    $query_string = http_build_query($query_params);
    $url = add_query_arg($query_params, $url);

    return $url;
}

public function redirect_request() {
    $current_url = home_url(add_query_arg(array(), $wp->request));

    foreach ($this->redirects as $redirect) {
        if ($current_url == $redirect['source_url']) {
            $destination_url = $redirect['destination_url'];
            $destination_url = $this->add_tracking_parameters($destination_url);
            wp_redirect($destination_url, 301);
            exit;
        }
    }
}
}

/**

Add tracking parameters to a URL

@param string $url The URL to add tracking parameters to

@return string The URL with tracking parameters added
*/
private function add_tracking_parameters($url)
{
$params = array();

// Add UTM parameters
foreach ($this->utm_parameters as $key => $value) {
if (!empty($value)) {
$params[] = $key . '=' . urlencode($value);
}
}

// Add FBCLID
if (!empty($this->fbclid)) {
$params[] = 'fbclid=' . urlencode($this->fbclid);
}

// Add GCLID
if (!empty($this->gclid)) {
$params[] = 'gclid=' . urlencode($this->gclid);
}

// Add Value Track parameters
foreach ($this->value_track_parameters as $key => $value) {
if (!empty($value)) {
$params[] = $key . '=' . urlencode($value);
}
}

// Add custom parameters
foreach ($this->custom_parameters as $key => $value) {
if (!empty($value)) {
$params[] = $key . '=' . urlencode($value);
}
}

// Append parameters to URL
if (!empty($params)) {
$separator = strpos($url, '?') !== false ? '&' : '?';
$url .= $separator . implode('&', $params);
}

return $url;
}

}

new URL_Forwarder();
}

// Initialize the plugin
$url_forwarder = new URL_Forwarder();

// Add a settings link to the plugin page
add_filter('plugin_action_links_' . plugin_basename(FILE), function ($links) use ($url_forwarder) {
$settings_link = '<a href="' . admin_url('options-general.php?page=' . $url_forwarder->plugin_slug) . '">' . __('Settings', 'url-forwarder') . '</a>';
array_unshift($links, $settings_link);
return $links;
});

// Add a redirect for each defined URL
foreach ($url_forwarder->redirects as $redirect) {
add_action('template_redirect', function () use ($redirect, $url_forwarder) {
if (is_page($redirect['source_url'])) {
$destination_url = $redirect['destination_url'];
$destination_url = $url_forwarder->add_tracking_parameters($destination_url);
wp_redirect($destination_url, 301);
exit;
}
});
}
// Add a redirect for each defined URL
foreach ($url_forwarder->redirects as $redirect) {
add_action('template_redirect', function () use ($redirect, $url_forwarder) {
if (is_page($redirect['source_url'])) {
$destination_url = $redirect['destination_url'];
$destination_url = $url_forwarder->add_tracking_parameters($destination_url);
wp_redirect($destination_url, 301);
exit;
}
});
}

// Add a settings page
add_action('admin_menu', function () use ($url_forwarder) {
add_options_page(__('URL Forwarder Settings', 'url-forwarder'), __('URL Forwarder', 'url-forwarder'), 'manage_options', $url_forwarder->plugin_slug, function () use ($url_forwarder) {
?>
<div class="wrap">
<h1><?php _e('URL Forwarder Settings', 'url-forwarder'); ?></h1>
<form method="post" action="options.php">
<?php
             settings_fields($url_forwarder->plugin_slug);
             do_settings_sections($url_forwarder->plugin_slug);
             submit_button(__('Save Changes', 'url-forwarder'));
             ?>
</form>
</div>
<?php
});
});

// Add a link to the plugin settings page
add_filter('plugin_action_links_' . plugin_basename(FILE), function ($links) use ($url_forwarder) {
$settings_link = '<a href="' . admin_url('options-general.php?page=' . $url_forwarder->plugin_slug) . '">' . __('Settings', 'url-forwarder') . '</a>';
array_unshift($links, $settings_link);
return $links;
});
});
