<?php
/**
 * Plugin Name: URL Forwarder
 * Plugin URI: https://github.com/sachinrgala/URL_forwarder
 * Description: Redirects specified URLs to other URLs.
 * Version: 1.0.0
 * Author: Sachin Gala
 * Author URI: https://sachingala.com
 * License: GPL2
 */


/**
 * Plugin Name: URL Forwarder
 * Plugin URI: https://github.com/sachinrgala/URL_forwarder
 * Description: Redirects specified URLs to other URLs.
 * Version: 1.0.0
 * Author: Sachin Gala
 * Author URI: https://sachingala.com
 * License: GPL2
 */


class Url_Forwarder_Admin {
    private $redirects;

    public function __construct() {
        add_action('admin_menu', array($this, 'add_menu_page'));
        add_action('admin_init', array($this, 'register_settings'));
        add_action('wp_ajax_add_redirect', array($this, 'ajax_add_redirect'));
        add_action('wp_ajax_delete_redirect', array($this, 'ajax_delete_redirect'));
        add_action('admin_init', array($this, 'register_settings'));
        $this->redirects = array();
        $this->load_redirects();
    }

    public function load_redirects() {
        global $wpdb;
        $table_name = $wpdb->prefix . 'url_forwarder_redirects';
        $results = $wpdb->get_results("SELECT * FROM $table_name");
        for ($i = 0; $i < count($results); $i++) {
            $this->redirects[$results[$i]->source_url] = $results[$i]->destination_url;
        }
    }

    public function ajax_add_redirect() {
        global $wpdb;
        $table_name = $wpdb->prefix . 'url_forwarder_redirects';
        $source_url = sanitize_text_field($_POST['source_url']);
        $destination_url = sanitize_text_field($_POST['destination_url']);
        $result = $wpdb->insert($table_name, array('source_url' => $source_url, 'destination_url' => $destination_url));
        if ($result) {
            echo json_encode(array('status' => 'success', 'message' => 'Redirect added successfully.'));
        } else {
            echo json_encode(array('status' => 'error', 'message' => 'Failed to add redirect.'));
        }
        wp_die();
    }

    public function ajax_delete_redirect() {
        global $wpdb;
        $table_name = $wpdb->prefix . 'url_forwarder_redirects';
        $source_url = sanitize_text_field($_POST['source_url']);
        $result = $wpdb->delete($table_name, array('source_url' => $source_url));
        if ($result) {
            echo json_encode(array('status' => 'success', 'message' => 'Redirect deleted successfully.'));
        } else {
            echo json_encode(array('status' => 'error', 'message' => 'Failed to delete redirect.'));
        }
        wp_die();
    }

    public function register_settings() {
        $admin = new Url_Forwarder_Admin();
        add_settings_section('url_forwarder_section', 'Url Forwarder Settings', array($admin, 'render_settings_page'), 'url_forwarder');
        add_settings_field('url_forwarder_email', 'Email', array($admin, 'render_email_field'), 'url_forwarder', 'url_forwarder_section');
        register_setting('url_forwarder', 'url_forwarder_email');
        register_setting('url_forwarder_settings', 'url_forwarder_redirects');
         register_setting('url_forwarder', 'url_forwarder_destination_url', array(
            'type' => 'string',
            'sanitize_callback' => 'sanitize_text_field',
            'show_in_rest' => true,
            'default' => '',
            ));
        add_settings_section(
            'url_forwarder_redirects',
            __('Redirects', 'url-forwarder'),
            '',
            'url_forwarder_settings'
        );
        for ($i = 1; $i <= 100; $i++) {
    add_settings_field(
        "url_forwarder_redirect_source_$i",
        __('Source URL', 'url-forwarder'),
        array($admin, 'render_source_url_field'),
        'url_forwarder_redirects',
        "url_forwarder_redirect_$i",
        array('label_for' => "url_forwarder_redirect_source_$i")
    );

    add_settings_field(
        "url_forwarder_redirect_target_$i",
        __('Target URL', 'url-forwarder'),
        array($admin, 'render_target_url_field'),
        'url_forwarder_redirects',
        "url_forwarder_redirect_$i",
        array('label_for' => "url_forwarder_redirect_target_$i")
    );

    register_setting(
        'url_forwarder_redirects',
        "url_forwarder_redirect_$i",
        array('sanitize_callback' => array($admin, 'sanitize_redirect_settings'))
    );
}

// You can now use the Url_Forwarder_Admin class outside of this file.

add_action('admin_menu', 'register_url_forwarder_menu');

function register_url_forwarder_menu() {
add_menu_page(
__('URL Forwarder', 'url-forwarder'),
__('URL Forwarder', 'url-forwarder'),
'manage_options',
'url_forwarder',
array('Url_Forwarder_Admin', 'render_settings_page'),
        'dashicons-admin-generic'
    );
}

add_action('admin_menu', 'register_url_forwarder_menu');

function url_forwarder_dashboard() {
    if (!current_user_can('manage_options')) {
        wp_die(__('You do not have sufficient permissions to access this page.', 'url-forwarder'));
    }
    ?>
    <div class="wrap">
        <h1><?php _e('URL Forwarder Dashboard', 'url-forwarder'); ?></h1>

        <form method="post" action="options.php">
            <?php
            settings_fields('url_forwarder_settings_group');
            do_settings_sections('url_forwarder');
            submit_button(__('Save Changes', 'url-forwarder'));
            ?>
        </form>
    </div><!-- .wrap -->
    <?php
}
/**
 * Callback function to render the Destination URL field
 *
 * @param array $args
 */
function render_destination_url_field($args)
{
    // Get the option name and value
    $option_name = $args[0];
    $destination_url = get_option($option_name);

    // Output the field
    echo '<input type="text" id="' . $option_name . '" name="' . $option_name . '" value="' . $destination_url . '" />';
}

// Closing brace for render_destination_url_field function should be here

new Url_Forwarder_Admin();
?>
</div><!-- .wrap -->
<?php
add_action('admin_menu', 'register_url_forwarder_menu');

function register_url_forwarder_menu() {
    add_menu_page(
        __('URL Forwarder', 'url-forwarder'),
        __('URL Forwarder', 'url-forwarder'),
        'manage_options',
        'url_forwarder',
        array('Url_Forwarder_Admin', 'render_settings_page'),
        'dashicons-admin-generic'
    );
}


// Wrap the add_action function inside a function
function register_admin_menu() {
    add_action('admin_menu', 'register_url_forwarder_menu');
}
add_action('init', 'register_admin_menu');

add_action('admin_menu', 'Url_Forwarder_Admin::add_menu_item');

// Callback function to render the settings page
function render_settings_page() {
?>

<div class="wrap">
    <h1><?php echo __('Url Forwarder Settings', 'url-forwarder'); ?></h1>
    <form method="post" action="options.php">
        <?php
        // Output necessary nonce fields for security
        settings_fields('url_forwarder_settings_group');
        // Output the settings sections and fields
        do_settings_sections('url_forwarder_settings');
        // Output the save settings button
        submit_button(__('Save Changes', 'url-forwarder'));
        ?>
    </form>
</div><!-- .wrap -->
<?php
}
?>

</div><!-- .wrap -->
<?php
}


// Render settings page
public static function render_settings_page() {
     ?>
        <div class="wrap">
            <h2><?php _e('URL Forwarder', 'url-forwarder'); ?></h2>
            <form method="post" action="options.php">
                <?php settings_fields('url_forwarder'); ?>
                <?php do_settings_sections('url_forwarder'); ?>
                <?php submit_button(); ?>
            </form>
        </div><!-- .wrap -->
        <?php
    // Check if user is allowed to access settings page
    if ( ! current_user_can( 'manage_options' ) ) {
        return;
    }

    // Get settings page URL
    $settings_page_url = menu_page_url( self::$menu_slug, false );

    // Get saved redirect data
    $redirects = get_option( 'url_forwarder_redirects', array() );

    // Output settings page HTML
    include_once( plugin_dir_path( __FILE__ ) . 'templates/settings-page.php' );
}

// Render source URL field
public function render_source_url_field( $args ) {
    // Get redirect index
    $redirect_index = str_replace( 'url_forwarder_redirect_source_url_', '', $args['id'] );

    // Get source URL value
    $source_url = isset( self::$redirects[ $redirect_index ]['source_url'] ) ? self::$redirects[ $redirect_index ]['source_url'] : '';

    // Output the field
    echo '<input type="text" id="' . $args['id'] . '" name="' . $args['id'] . '" value="' . $source_url . '" />';
}

// Render destination URL field
public function render_destination_url_field( $args ) {
    $destination_url = get_option('url_forwarder_destination_url');
        ?>
        <input type="text" name="url_forwarder_destination_url" value="<?php echo esc_attr($destination_url); ?>" class="regular-text">
        <?php
    // Get redirect index
    $redirect_index = str_replace( 'url_forwarder_redirect_destination_', '', $args['id'] );

    // Get destination URL value
    $destination_url = isset( self::$redirects[ $redirect_index ]['destination_url'] ) ? self::$redirects[ $redirect_index ]['destination_url'] : '';

    // Output the field
    echo '<input type="text" id="' . $args['id'] . '" name="' . $args['id'] . '" value="' . $destination_url . '" />';
}
class URL_Forwarder {
    private static $plugin_slug = 'my-tracking-plugin';

    // Constructor
    public function __construct() {
        // Add menu page
        add_action( 'admin_menu', array( $this, 'add_menu_page' ) );

        // Register settings
        add_action( 'admin_init', array( $this, 'register_settings' ) );

        // Add "Settings" link to plugin page
        add_filter( 'plugin_action_links_' . plugin_basename( __FILE__ ), array( $this, 'add_settings_link' ) );
    }

    // Add menu page
    public function add_menu_page() {
        add_menu_page(
            'URL Forwarder',
            'URL Forwarder',
            'manage_options',
            self::$plugin_slug,
            array( $this, 'render_settings_page' )
        );
    }

    // Register settings
    public function register_settings() {
        register_setting( 'url_forwarder_settings', 'url_forwarder_redirects' );
    }

    // Add "Settings" link to plugin page
    public function add_settings_link( $links ) {
        $settings_link = '<a href="' . menu_page_url( self::$plugin_slug, false ) . '">' . __( 'Settings', 'url-forwarder' ) . '</a>';
        array_unshift( $links, $settings_link );
        return $links;
    }

    // Render settings page
    public function render_settings_page() {
        // Get redirect data
        $redirects = get_option( 'url_forwarder_redirects', array() );

        // Load template
        include( plugin_dir_path( __FILE__ ) . 'templates/settings-page.php' );
    }

    // Validate and save settings
    public function save_settings() {
        // Check if user is allowed to save settings
        if ( ! current_user_can( 'manage_options' ) ) {
            return;
        }

        // Check if nonce is set and valid
        if ( ! isset( $_POST['url_forwarder_settings_nonce'] ) || ! wp_verify_nonce( $_POST['url_forwarder_settings_nonce'], 'url_forwarder_settings' ) ) {
            return;
        }

        // Get saved redirect data
        $redirects = get_option( 'url_forwarder_redirects', array() );

        // Loop through post data and update redirect data
        foreach ( $_POST as $key => $value ) {
            // Check if key is a redirect field
            if ( strpos( $key, 'url_forwarder_redirect_' ) === 0 ) {
                // Get redirect index
                $redirect_index = str_replace( 'url_forwarder_redirect_', '', $key );
                $redirect_index_parts = explode( '_', $redirect_index );
                $redirect_index = $redirect_index_parts[0];

                // Get field name
                $field_name = str_replace( 'url_forwarder_redirect_' . $redirect_index . '_', '', $key );

                // Update redirect data
                $redirects[ $redirect_index ][ $field_name ] = sanitize_text_field( $value );
            }
        }

        // Save redirect data
        update_option( 'url_forwarder_redirects', $redirects );
    }

    // Redirect to settings page
    public function redirect_to_settings_page() {
        // Redirect back to settings page
        wp_redirect( menu_page_url( self::$plugin_slug, false ) );
        exit;
    }
}

// Initialize the URL_Forwarder plugin
add_action('plugins_loaded', function() {
    new URL_Forwarder();
});

// Add a link to the plugin settings page on the plugin page
add_filter( 'plugin_action_links_my-tracking-plugin/my-tracking-plugin.php', function( $links ) {
    $settings_link = '<a href="' . esc_url( get_admin_url( null, 'options-general.php?page=url-forwarder' ) ) . '">' . __( 'Settings', 'url-forwarder' ) . '</a>';
    array_push( $links, $settings_link );
    return $links;
});


// Define the plugin basename
$plugin_basename = plugin_basename(__FILE__);

// Add settings link to plugin page
add_filter( "plugin_action_links_$plugin_basename", 'url_forwarder_settings_link' );

/**
 * Add tracking parameters to a URL
 *
 * @param string $url The URL to add tracking parameters to
 * @return string The URL with tracking parameters added
 */
function add_tracking_parameters($url) {
    // Initialize an empty array to store the tracking parameters
    $params = array();

    // Loop through the UTM parameters and add them to the array if they're not empty
    foreach ($this->utm_parameters as $key => $value) {
        if (!empty($value)) {
            $params[] = $key . '=' . urlencode($value);
        }
    }

    // Add FBCLID parameter if it's not empty
    if (!empty($this->fbclid)) {
        $params[] = 'fbclid=' . urlencode($this->fbclid);
    }

    // Add GCLID parameter if it's not empty
    if (!empty($this->gclid)) {
        $params[] = 'gclid=' . urlencode($this->gclid);
    }

    // Loop through the Value Track parameters and add them to the array if they're not empty
    foreach ($this->value_track_parameters as $key => $value) {
        if (!empty($value)) {
            $params[] = $key . '=' . urlencode($value);
        }
    }

    // Loop through the custom parameters and add them to the array if they're not empty
    foreach ($this->custom_parameters as $key => $value) {
        if (!empty($value)) {
            $params[] = $key . '=' . urlencode($value);
        }
    }

    // Combine the original URL with the tracking parameters and return the result
    $url_with_params = $url . '?' . implode('&', $params);
    return $url_with_params;
}

class URL_Forwarder {
    public function forward_url() {
        // Get the current URL
        $current_url = 'http' . (isset($_SERVER['HTTPS']) ? 's' : '') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

        // Add tracking parameters to the current URL
        $new_url = $this->add_tracking_parameters($current_url);

        // Redirect to the new URL
        header('Location: ' . $new_url);
        exit;
    }

    private function add_tracking_parameters($url) {
        // Add tracking parameters to the URL
        // ...

        return $url_with_tracking_parameters;
    }
}

// Initialize the plugin
$url_forwarder = new URL_Forwarder();

// Define the plugin basename
$plugin_basename = plugin_basename(__FILE__);

// Add a settings link to the plugin page
add_filter('plugin_action_links_' . $plugin_basename, function ($links) use ($url_forwarder) {
    $settings_link = '<a href="' . admin_url('options-general.php?page=' . $url_forwarder->plugin_slug) . '">' . __('Settings', 'url-forwarder') . '</a>';
    array_unshift($links, $settings_link);
    return $links;
});

// Add a settings link to the plugin page
add_filter('plugin_action_links_' . plugin_basename(__FILE__), function ($links) use ($url_forwarder) {
  $settings_link = '<a href="' . admin_url('options-general.php?page=' . $url_forwarder->plugin_slug) . '">' . __('Settings', 'url-forwarder') . '</a>';
  array_unshift($links, $settings_link);
  return $links;
});

class UrlForwarder {
  private $redirects = array();
  public $pluginSlug = 'my-tracking-plugin';

  public function __construct() {
    // Load the redirects from the database
    $this->loadRedirects();
  }

  private function loadRedirects() {
    // Load redirects from the database
    // ...
  }

  public function getRedirects() {
    return $this->redirects;
  }

  public function addTrackingParameters($url) {
    // Add tracking parameters to the URL
    // ...
    return $url;
  }
}
function redirect_urls() {
  $url_forwarder = new UrlForwarder();
  $redirects = $url_forwarder->getRedirects();

  foreach ($redirects as $redirect) {
    add_action('template_redirect', function () use ($redirect, $url_forwarder) {
      if (is_page($redirect['source_url'])) {
        $destination_url = $redirect['destination_url'];
        $destination_url = $url_forwarder->addTrackingParameters($destination_url);
        wp_redirect($destination_url, 301);
        exit;
      }
    });
  }
}
add_action('init', 'redirect_urls');

function url_forwarder_template_redirect() {
  $url_forwarder = new Url_Forwarder();
  $redirects = $url_forwarder->get_redirects();

  foreach ($redirects as $redirect) {
    if (is_page($redirect['source_url'])) {
      $destination_url = $url_forwarder->add_tracking_parameters($redirect['destination_url']);
      wp_redirect($destination_url, 301);
      exit;
    }
  }
}
add_action('template_redirect', 'url_forwarder_template_redirect');

// Add a settings page
add_action('admin_menu', function () use ($url_forwarder) {
add_options_page(__('URL Forwarder Settings', 'url-forwarder'), __('URL Forwarder', 'url-forwarder'), 'manage_options', $url_forwarder->plugin_slug, function () use ($url_forwarder) {
?>
<div class="wrap">
<h1><?php _e('URL Forwarder Settings', 'url-forwarder'); ?></h1>
<form method="post" action="options.php">
<?php
             settings_fields($url_forwarder->plugin_slug);
             do_settings_sections($url_forwarder->plugin_slug);
             submit_button(__('Save Changes', 'url-forwarder'));
             ?>
</form>
</div>
<?php
});
});

// Add a link to the plugin settings page
define('MT_PLUGIN_FILE', __FILE__);

add_filter('plugin_action_links_' . plugin_basename(MT_PLUGIN_FILE), function ($links) {
    $url_forwarder = new URL_Forwarder();
    $settings_link = '<a href="' . admin_url('options-general.php?page=' . $url_forwarder->plugin_slug) . '">' . __('Settings', 'url-forwarder') . '</a>';
    array_unshift($links, $settings_link);
    return $links;
});
